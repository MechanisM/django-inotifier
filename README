django-inotifier - a thin django wrapper around pyinotify

Author: Jay Wineinger <jay.wineinger@gmail.com>

This project provides a django app which is intended to be pluggable into any
other project.  When configured and running, pyinotify is used to monitor a
file or directory for changes. When changes are detected, a corresponding 
django signal will be issued and can be handled by other apps.

Users can also define their own event processor classes which can do anything.
For instance, instead of sending django signals when certain events occur, the
event processor could add tasks to a queue or send a request to a web service.
In this case, the only benefit gained by using this app is the use of
the management commands which are provided for starting and stopping the
pyinotify daemon.

1) Quickstart

    1.1) Install the inotifier application

    1.2) Add inotifier to INSTALLED_APPS
        -do this so the following management commands will be available:
            "inotifier_start" - this starts the pyinotify daemon
            "inotifier_start" - this stops the pyinotify daemon

    1.3) Define settings in project settings.py

        1.3.1) INOTIFIER_WATCH_PATHS
            -required
            -An iterable of 3-tuples:
                ('/path/to/monitor', <pyinotify event mask>, '<event processor class>')
            -see example in inotifier/settings_example.py

        1.3.2) INOTIFIER_DAEMON_STDOUT
            -optional
            -A string path to a file which will be used as stdout for the pyinotify daemon

        1.3.3) INOTIFIER_DAEMON_STDERR 
            -optional
            -A string path to a file which will be used as stderr for the pyinotify daemon

        1.3.4) PROJECT_PATH
            -optional
            -The path to the main project directory. Used to generate location for the 
             daemon pid file.  If not set, pid file will be put into /tmp.

    1.4) Start pyinotify daemon
        ./manage.py inotifier_start

    1.5) Stop pyinotify daemon
        -Obviously, only do this when you want to stop monitoring
        ./manage.py inotifier_stop

2) Defining your own event processor class

    2.1) Learn about it

        See the documentation for the pyinotify project on how to write an event processor.

        See event_processors.py in the inotifier app directory. There are a number of simple 
        event processors there, plus a more complex one (CreateViaChunksSignaler).
        
        The event processor classes included in this app contain nothing specific to this
        app, besides the django stuff -- they are just event processors which will work with
        pyinotify.

    2.2) Create it

        Put your context processor class somewhere accessible by code in your project. The
        author's convention is to use myapp/event_processors.py.

    2.2) Use it

        Once you have defined your class, simply specify it as the class to handle a certain 
        watch location in your INOTIFIER_WATCH_PATHS setting.
        
        For example, assume you added your class to myproject/myapp/event_processors.py as
        MySuperFunEventProcessor(). If your project is NOT on PYTHONPATH, you would specify the
        <event processor class> as 'myproject.myapp.event_processors.MySuperFunEventProcessor'.
        If your project IS on PYTHONPATH, then you would omit 'myproject' from the beginning of 
        that.
    
3) FAQ

    3.1) Q: How do I use this on <insert non-linux OS>?
         A: You can't.  inotify is a linux specific feature. Thus, pyinotify and this project
            will only work on linux.
